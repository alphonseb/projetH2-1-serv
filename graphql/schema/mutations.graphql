type Mutation {
    signup(password: String! mail: String! name: String! gender: String! birth: BirthInput!): AuthPayload!
    login(password: String! mail: String!): AuthPayload!
    updateMe(data: updateUserData): User!
    pushMeData(type: PushType! values: [String!]!): User!
    removeMeData(type: PushType! values: [String!]!): User!
    createNotification(to: String! content: String! from: String type: notificationType!): Notification
    readNotifications(ids: [String!]!): MultipleUpdate
    addFamilyMember(users: [addFamilyInput!]!): [FamilyUser]
    familyMemberHasVerify(fromId: String!, type: familyType): User
    createBook(title: String! content: String! date: Date!): Book!
    updateBook(id: String! title: String content: String date: Date): Book!
    deleteBook(id: String!): Book!
    addMedia(bookId: String! file: Upload! description: String!): Media!
    updateMedia(id: String! description: String!): Media!
    deleteMedia(id: String!): Media!
    addComment(bookId: String! content: String!): Comment!
    updateComment(id: String! content: String!): Comment!
    deleteComment(id: String!): Comment!
}

type AuthPayload {
    token: String!
    user: User!
}

type MultipleUpdate {
    found: Int
    modified: Int
    ok: Int
}

enum familyType {
    FATHER
    MOTHER
    FRATERY
    PARTNER
    CHILDREN
}

enum notificationType {
    INFO
    VALIDATE
}

enum PushType {
    HOBBIES
    SPORTS
}

input updateUserData {
    name: String
    mail: String
    password: String
    profilePicture: Upload
    gender: String
    birth: BirthInput
    phone: String
    work: String
    loveSituation: String
    hobbies: [String]
    sports: [String]
}

input BirthInput {
    date: Date
    place: String
}

input addFamilyInput {
    id: String! 
    type: familyType
}